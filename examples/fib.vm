mv 20 a
call print_fib
print 10

exit

~ print N fib numbers, N stored in A
$print_fib
    push c

    mv 1 c

    $print_loop
        push a

        mv c a
        call fib
        printn b
        print 32

        pop a
        add 1 c

        lte a c
        hopt print_loop

    pop c
    ret

~ take N from A and place fib(N) in B
$fib
    push a              ~ save N

    lte 1 a             ~ if N is greater than 1 we jump to recursion
    hopf call_rec

    mv a b              ~ N is 1 or 0 so we place it in B (return reg)
    pop a               ~ grab A off the stack and return
    ret

$call_rec
    call recurse        ~ start the recursion
    ret

$recurse
    push a              ~ save A
    sub 1 a             ~ sub 1 from A and call fib 
    call fib
    push b              ~ push the result

    sub 1 a             ~ sub 1 again and call fib
    call fib

    pop a               ~ grab first result fib(n - 1) from stack
    add a b             ~ add it to the second result

    pop a               ~ now pop N back into A and return
    ret

