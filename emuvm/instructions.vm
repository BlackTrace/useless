~ nop instruction, do nothing, return success
$v_nop 
    mv 1 r
    ret

~ push instruction, decrement the sp (grow stack) and place
~ the provided argument to where the sp points, return success
$v_push
    sub 1 vsp
    add 1 pc
    mv *pc *vsp
    mv 1 r
    ret

~ zero the item at the top of stack, shrink stack, return
$v_pop
    mv 0 *vsp
    add 1 vsp
    mv 1 r
    ret

~ print out item at the top of the stack, return
$v_print
    print *vsp 
    call v_pop
    mv 1 r
    ret
    
~ print out item at the top of the stack as a number, return
$v_printn
    printn *vsp 
    call v_pop
    mv 1 r
    ret

~ print out item at the top of the stack as a number, no pop
$v_peek
    printn *vsp 
    mv 1 r
    ret
    
~ remove the top two items from the stack, add and push result
$v_add
    push a          ~ ADD
    push b

    mv *vsp a
    add 1 vsp
    mv *vsp b

    add a b
    mv b *vsp

    mv 1 r
    pop b
    pop a
    ret

~ remove the top two items from the stack, sub and push result
$v_sub
    push a          ~ SUB
    push b

    mv *vsp a
    add 1 vsp
    mv *vsp b

    sub a b
    mv b *vsp

    mv 1 r
    pop b
    pop a
    ret

~ remove the top two items from the stack, multiply and push result
$v_mul
    push a              ~ MUL
    push b

    mv *vsp a
    add 1 vsp
    mv *vsp b

    mul a b
    mv b *vsp

    mv 1 r
    pop b
    pop a
    ret

~ remove the top two items from the stack, divide and push result
$v_div
    push a                  ~ DIV
    push b

    mv *vsp a
    add 1 vsp
    mv *vsp b

    div a b
    mv b *vsp

    mv 1 r
    pop b
    pop a
    ret

~ test if the two items on top are eq, push result
$v_eq
    push a                  ~ EQ
    push b

    mv *vsp a
    add 1 vsp
    mv *vsp b

    call equals
    mv r *vsp
    
    mv 1 r
    pop b
    pop a
    ret

~ test if the top is less than second from top
$v_lt
    push a                  ~ LESS THAN
    push b

    mv *vsp a       ~ grab the top two
    add 1 vsp
    mv *vsp b
    
    mv 0 *vsp       ~ assume the false case
    lt a b          ~ test for less than
    hopt v_lt_true  ~ place a 1 on the stack
    hop v_lt_ret
    
    $v_lt_true
        mv 1 *vsp   ~ place a one on the stack
    
    $v_lt_ret
        mv 1 r
        pop b
        pop a
    ret

~ takes the provided arg and starts executing from there
$v_hop
    push a                  ~ vanilla HOP
    
    add 1 pc
    mv *pc a
    mv a pc
    sub 1 pc
    add &ram pc 

    mv 1 r
    pop a
    ret

~ uses top of stack to test true or false, then hop accordingly
$v_hopt
    push a                  ~ HOP TRUE
    
    eq 1 *vsp
    add 1 vsp
    add 1 pc
    hopf hopt_end

    mv *pc a
    mv a pc
    sub 1 pc
    add &ram pc 
    
    $hopt_end
        mv 1 r
        pop a
        ret

~ uses top of stack to test true or false, then hop accordingly
$v_hopf
    push a                      ~ HOP FALSE
    
    eq 1 *vsp
    add 1 vsp
    add 1 pc
    hopt hopf_end

    mv *pc a
    mv a pc
    sub 1 pc
    add &ram pc 
    
    $hopf_end
        mv 1 r
        pop a
        ret

~ pushes a copy of the top
$v_dup
    push a                  ~ DUP

    mv *vsp a
    sub 1 vsp
    mv a *vsp

    mv 1 r
    pop a
    ret

$v_call
    push a                  ~ CALL
    push b
    
    add 1 pc
    mv *pc a        ~ num of args
    add 1 pc
    mv *pc b        ~ address of function 

    sub 1 vsp       ~ push argc
    mv a *vsp

    sub 1 vsp       ~ push the base pointer
    mv vbp *vsp

    sub 1 vsp       ~ save the program counter
    mv pc *vsp

    mv vsp vbp      ~ base pointer = stack pointer
    mv &ram pc      ~ set pc to new function addr
    add b pc
    sub 1 pc
    
    pop b
    pop a
    mv 1 r
    ret

$v_ret
    push a              ~ RETURN
    push b

    mv *vsp a       ~ pop return value
    add 1 vsp

    mv vbp vsp      ~ grab old stack pointer

    mv *vsp pc      ~ pop the old program counter
    add 1 vsp

    mv *vsp vbp     ~ pop the base pointer
    add 1 vsp

    mv *vsp b       ~ args to throw away
    add 1 vsp
    add b vsp       ~ pop them all off

    sub 1 vsp       ~ push the return value to stack
    mv a *vsp

    pop b
    pop a

    mv 1 r 
    ret

$v_sld
    push a              ~ STACK LOAD
    push b
    
    add 1 pc    ~ grab the offset arg
    mv *pc a

    mv vbp b    ~ mv base pointer into b
    add a b     ~ add the offset

    sub 1 vsp   ~ push the item we loaded
    mv *b *vsp

    pop b
    pop a

    mv 1 r
    ret
    
$v_exit
    mv 0 r          ~ EXIT
    ret

~ array elements consist of operation string, number of args
~ and a pointer to the operation routine
$op_array
    &nop_str   0 &v_nop
    &push_str  1 &v_push
    &pop_str   0 &v_pop
    &prnt_str  1 &v_print
    &prntn_str 1 &v_printn
    &peek_str  1 &v_peek
    &add_str   0 &v_add
    &sub_str   0 &v_sub
    &mul_str   0 &v_mul
    &div_str   0 &v_div
    &eq_str    0 &v_eq
    &lt_str    0 &v_lt
    &hop_str   0 &v_hop
    &hopt_str  0 &v_hopt
    &hopf_str  0 &v_hopf
    &dup_str   0 &v_dup
    &call_str  0 &v_call
    &ret_str   0 &v_ret
    &sld_str   0 &v_sld
    &exit_str  0 &v_exit
$op_array_end

$nop_str    "nop"
$push_str   "push"
$pop_str    "pop"
$prnt_str   "print"
$prntn_str  "printn"
$peek_str   "peek"
$add_str    "add"
$sub_str    "sub"
$mul_str    "mul"
$div_str    "div"
$eq_str     "eq"
$lt_str     "lt"
$hop_str    "hop"
$hopt_str   "hopt"
$hopf_str   "hopf"
$dup_str    "dup"
$call_str   "call"
$ret_str    "ret"
$sld_str    "sld"
$exit_str   "exit"
$end_str    "end"
    
~ takes string stored in a and uses the op array to turn it
~ into an opcode, return in r
$encode_idx 0
$encode
    push a
    push b
    push c
    
    mv &op_array c              ~ mv start of op array to c
    mv 0 encode_idx
    
    $encode_loop
        mv *c b                 ~ store the string in b for comparison
        call str_equals
        eq 1 r
        hopt encode_found       ~ string matches the token

        eq &op_array_end c      ~ search entire list, to no avail
        hopt encode_not_found
    
        add 1 encode_idx        ~ increment idx by one and pointer by 3 (size of element)
        add 3 c
        hop encode_loop         ~ move to the next item

    $encode_found
        mv encode_idx r
        hop encode_end

    $encode_not_found
        call is_label           ~ wasnt an instruction try label
        eq 0 r                  ~ if is_label ret 0, its not a label
        hopf encode_end

        call atoi               ~ it wasnt a label either, call atoi

    $encode_end
        pop c
        pop b
        pop a
        ret

$run_instruction
    push a
    push b

    mv &op_array b              ~ mv start of op array to b

    mul 3 a                     ~ multiply index by 3 (sz of element)
    add 2 a                     ~ add 2 two get the function ptr 
    add b a                     ~ add base to the offset
    mv *a a                     ~ derefernce a to get the address of func

    call *a                     ~ call the function!

    pop b
    pop a
    ret


