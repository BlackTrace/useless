instructions to make useless usable:

math:
    4 flavors: 
        R  - operand 1 is a literal, operand 2 is a register [x]
        L  - operand 1 is a literal, operand 2 is a label [x]
        RL - operand 1 is a register, operand 2 is a label [x]
        LR - operand 1 is a label, operand 2 is a register [x]
    
    NOTE: resulting values are stored in operand 2
    
    one of the following for each flavor:
        ADD - add operand 1 to value in operand 2
        SUB - subtract operand 1 from value in operand 2
        MUL - multiply operand 1 by value in operand 2
        DIV - divide operand 2 by operand 1
        MOD - modulus operand 1 with operand 2

conditionals:
    3 flavors:
        R  - compare literal to register [x]
        L  - compare literal to a label [x]
        RL - compare register to label [x]
    
    one of the following for each flavor:
        EQ   - are the operands equal
        NEQ  - are the operands not equal
        LT   - is operand 1 < operand 2
        LTE  - is operand 1 < or = operand 2
        GE   - is operand 1 > operand 2
        GTE  - is operand 1 > or = operand 2

storage and loading:
    
    dereferencing:
        DREFR - dereference register and store result in register [x]
        DREFL - dereference register and store result in a label [x]

    moving:
        MVRL - move value from register to label [x]
        MVLR - move value from label to register [x]
        MVRR - move value from register to  register [x]
        MVLL - move value from label to label [x]

    store:
        STORER - store literal in register [x]
        STOREL - store literal at label [x]

conditional hops:
    HOPT - hop if last comparison was true [x]
    HOPF - hop if last comparison was false [x]


stack operations:
    3 flavors of PUSH and POP:
        literal  - push or a pop a literal [x]
        register - push or pop using a register [x]
        label    - push or pop using a label

routine calling:
    routine calling will be done using labels and the stack

    CALL - call a function starting at a label
    RET  - return from a function

TODO: probably binary operators
